Buffer Overflow Attack> 
메모리를 다루는데 오류가 발생하여 잘못된 동작을 하는 프로그램 취약점. 프로세스 메모리 영역 중 버퍼에 초과값을 입력하여 시스템 중지 또는 원하는 동작을 하도록 조작.
  -스택 버퍼오버플로우 : 스택에 할당된 버퍼들이 문자열 계산 등에 의해 정의된 버퍼의 한계치를 넘는 경우 "복귀주소"를 변경하고 공격자가 원하는 임의 코드를 실행
    *Stack : 함수처리를 위해 지역번수 및 매개변수가 위치하는 메모리 영역
  -힙 버퍼오버플로우 : 힙에 할당된 버퍼들에 문자열 등이 저장될 때, 최초 정의된 힙의 메모리 사이즈를 초과하여 문자열 등이 저장되는 경우 "데이터와 함수주소" 등을 변경하여 공격자가 원하는 임의 코드를 실행
    *Heap : 사용자가 동적으로 할당하는 메모리 영역
  -방어기법
    1.스택가드 : canary word(무결성 체크용 값을 복귀주소와 변수 사이에 삽입). BoF 시 canry값 변조되는데 이 경우 복귀주소를 호출하지 않음
    2.스택실드 : 함수 시작시 복귀주소를 Global RET라는 특수 스택에 저장해 둠. 함수 중료시 저장된 값과 스택의 RET값을 비교해 다를 경우 프로그램 중단
    3.ASLR : 메모리 공격을 방어하기 위해 주소공간배치를 난수화. 실행시마다 메모리주소를 변경시킴
    4.안전한 개발 :BoF 관련 C언어 함수
       strcpy(char *dst, const char *src) //취약 || strncpy(char *dst, const char *src, size_t len) //안전
          strcat,strcpy,gets,scanf,sscanf,vscanf,vsscanf,sprintf,vsprintf,gethostbyname()   //취약
          strncat,strncpy,fgets,fscanf,vfscanf,snprintf,vsnprintf()   //권장
          ex) strcpy(buff,argv[1]); >> strncpy(buff,argv[1],7); or strncpy(buff,argv[1],sizeof(buff)-1);
   
Race Condition Attack>
둘 이상의 프로세스나 스레드가 공유자원에 동시에 사용하려고 접근할 때 root권한 획득하고 파일에 대한 접근을 하는 공격. 접근하는 순서에 따라 비정상적인 결과가 발생하는 조건/상황. 
실행되는 프로세스가 임시파일을 만드는 경우 악의적인 프로그램을 통해 그 프로세스 실행 중 끼어들어 임시파일을 목적파일로 연결(심볼릭 링크)하여 악의적 행위 수행
