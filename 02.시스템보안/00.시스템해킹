Buffer Overflow Attack> 
메모리를 다루는데 오류가 발생하여 잘못된 동작을 하는 프로그램 취약점. 프로세스 메모리 영역 중 버퍼에 초과값을 입력하여 시스템 중지 또는 원하는 동작을 하도록 조작.
  -스택 버퍼오버플로우 : 스택에 할당된 버퍼들이 문자열 계산 등에 의해 정의된 버퍼의 한계치를 넘는 경우 "복귀주소"를 변경하고 공격자가 원하는 임의 코드를 실행
    *Stack : 함수처리를 위해 지역번수 및 매개변수가 위치하는 메모리 영역
  -힙 버퍼오버플로우 : 힙에 할당된 버퍼들에 문자열 등이 저장될 때, 최초 정의된 힙의 메모리 사이즈를 초과하여 문자열 등이 저장되는 경우 "데이터와 함수주소" 등을 변경하여 공격자가 원하는 임의 코드를 실행
    *Heap : 사용자가 동적으로 할당하는 메모리 영역
  -방어기법
    1.스택가드 : canary word(무결성 체크용 값을 복귀주소와 변수 사이에 삽입). BoF 시 canry값 변조되는데 이 경우 복귀주소를 호출하지 않음
    2.스택실드 : 함수 시작시 복귀주소를 Global RET라는 특수 스택에 저장해 둠. 함수 중료시 저장된 값과 스택의 RET값을 비교해 다를 경우 프로그램 중단
    3.ASLR : 메모리 공격을 방어하기 위해 주소공간배치를 난수화. 실행시마다 메모리주소를 변경시킴
    4.안전한 개발 :BoF 관련 C언어 함수
       strcpy(char *dst, const char *src) //취약 || strncpy(char *dst, const char *src, size_t len) //안전
          strcat,strcpy,gets,scanf,sscanf,vscanf,vsscanf,sprintf,vsprintf,gethostbyname()   //취약
          strncat,strncpy,fgets,fscanf,vfscanf,snprintf,vsnprintf()   //권장
          ex) strcpy(buff,argv[1]); >> strncpy(buff,argv[1],7); or strncpy(buff,argv[1],sizeof(buff)-1);
   
Race Condition Attack>
둘 이상의 프로세스나 스레드가 공유자원에 동시에 사용하려고 접근할 때 root권한 획득하고 파일에 대한 접근을 하는 공격. 접근하는 순서에 따라 비정상적인 결과가 발생하는 조건/상황. 
실행되는 프로세스가 임시파일을 만드는 경우 악의적인 프로그램을 통해 그 프로세스 실행 중 끼어들어 임시파일을 목적파일로 연결(심볼릭 링크)하여 악의적 행위 수행
  *Deadlock(교착상태) : 다중 프로그래밍 시스템에서 다수의 프로세스들이 자원을 점유한 상태에서 서로 다른 프로세스가 점유하고 있는 자원을 요구하며 무한정 기다리는 현상
   -방어기법
     1.가능하면 임시파일을 생성하지 않는다
     2.파일 생성 시 이미 동일한 파일이 존재하는 경우 파일 생성 또는 쓰기를 금지한다
     3.사용하고자 하는 파일에 링크가 걸려있으면 실행을 중단한다
     4.umask를 최하 022정도로 유지하여 임시로 생성한 파일이 공격자에 의해 악의적으로 삭제되지 않도록 한다

Format String Attack>   *Format String : C언어의 printf()등의 함수에서 사용되는 문자열의 입출력 형태를 정의하는 문자열로 서식문자열이라 표현
데이터의 형태와 길이에 대한 불명확한 정의로 인한 문제점 중 데이터 형태에 대한 불명확한 정의. 외부로부터 입력된 값을 검증하지 않고 입출력 함수의 포맷스트링을 그대로 사용하는 경우 발생
취약한 프로세스를 공격하거나 메모리 내용을 읽거나 쓸 수 있어 그 결과, 공격자는 프로세스의 권한을 획득하여 임의의 코드를 실행
   -방어기법
    포맷스트링을 함수의 입력 파라미터로 직접 사용하지 않는다.
    ex) #include <stdio.h>
        int main(int argc,char **argv){
           pring(argv[1]); //취약          >> printf("%s",argv[1]); //안전
        }
