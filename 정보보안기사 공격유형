SQL인젝션 – 데이터베이스 공격유형
XSS / CSRF / SSRF – 웹사이트 악성스크립트 주입
파일업로드취약점 – 웹사이트 악성파일(jsp,php) 업로드. 원격으로 해당파일 접근하여 실행. 
Slowloris / RUDY – 웹서버 취약점(개행문자조작)
DNS증폭공격 / NTP증폭공격 – DRDoS유형(IP Spoofing)
HTTP응답분할공격  - CRLF취약점
Heartbleed – OpenSSL 1.01f이하 버전 취약점

XSS – 세션/쿠키탈취, 시스템관리자권한탈취, 악성코드다운로드, 웹사이트변조  웹사이트(악성스크립트주입)
다른공격들은 취약점을 갖고있는 서버를 공격, XSS는 서버의 취약점을 이용하여 클라이언트에서 악성코드 실행
1.	공격자는 웹사이트의 방명록 등에 악의적인 스크립트를 삽입한 글을 남김
2.	다른사용자들이 방명록을 방문하여 공격자가 작성한 게시물을 읽음
3.	이때 게시물에 저장되어 있던 스크립트가 사용자에게 전달
4.	웹브라우저는 스크립트를 실행(웹쉘)하여 세션쿠키가 공격자에게 전달
5.	공격자는 세션쿠키를 이용하여 해당 사용자권한 획득 및 사이트접속
대응 : 쿠키에 중요정보를 담지않고 서버에 중요정보 저장
       정보 암호화
       httponly속성 사용
       Snort Rule작성(XSS공격탐지)
------------------------------------------------------------------------------------
CSRF – 권한도용
권한을 도용당한 클라이언트가 가짜 요청을 서버에 전송. (사용자는 자신의 의지와는 무관) 특정 웹페이지에 악성행위
클라이언트측에서 요청수행 (Client Side)
패스워드변경 및 로그인연동을 통한 주소변경과 같은 인증취약점을 연계하여 게시판이나 메일을 통해 취약점에 연결할 수 있는 악성스크립트 배포
대응 : Referrer검증 (BackEnd단에서 request의 referrer을 확인하여 Domain과 일치하는지 검증)
------------------------------------------------------------------------------------
SSRF – 데이터유출, 오동작
서버측에서 위조된 HTTP요청을 발생시켜 직접 접근이 제한된 서버 내부자원에 접근, 외부로 데이터유출 또는 오동작유발
웹서버측에서 요청수행 (Server Side)
외부에서 접근가능한 웹서버의 File Inclusion 취약파라미터를 통해 내부서버에 요청을 보내고 결과를 받아 정보탈취 및 오동작을 유발
대응 : 중요데이터는 내부서버에 저장
       URL스키마방식을 HTTP,HTTPS만 내부파일에 접근 허용. (FTP같은 특정서비스는 차단)
       정규표현식을 사용해 소스코드를 시큐어코딩 작업
------------------------------------------------------------------------------------
파일업로드 – 주요정보획득, 시스템권한 획득
앱개발,운영환경과 동일한 언어로 작성된 악성파일을 웹서버 측에 업로드
원격으로 해당파일에 접근하여 실행시키는 취약점. 웹쉘 등의 파일을 이용한 시스템 장악 목적
업로드포인트 (웹쉘실행 요구사항) 
업로드경로,위치 (웹쉘실행 요구사항)
실행권한 (웹쉘실행 요구사항)
>> 게시판에 첨부파일(jsp,php,asp,cgi) 기능, 글쓰기권한이 있는지 확인.
웹쉘 업로드후 실행 -> 실행가능한 서버사이드 언어 업로드
NC를 이용하여 리버스텔넷 연결
BackDoor설치 후 내부주요정보 유출시도
>> 업로드기능 존재확인 – 악성코드업로드시도 – 시스템명령어 실행 //성공시 주요정보취득, 시스템권한획득
대응 : 업로드파일을 위한 디렉토리에는 실행설정 제거
첨부파일 확장자 필터링처리
------------------------------------------------------------------------------------
SQL Injection – 인증우회, 시스템명령어 삽입, 웹쉘생성    DATABASE조작(코드삽입)
         SELECT 구문 변조
1.	Error based / 로그인 : ‘OR 1=1 –‘ 구문을 이용해 WHERE절 모두 참, --를 넣어 뒤의구문 주석처리
결과 : Users테이블에 있는 모든정보 조회. 관리자 계정 탈취  
2.	UNION based / 게시글조회 : ‘UNION SELECT null.id.passwd FROM Users –‘ 사용자의 id와 passwd요청하는 쿼리문주입
결과 : 개인정보가 게시글과 함께 화면에 보여짐  
3.	blind based / 로그인폼 통해 DB명 추출:‘abc123’ and ASCII(SUBSTR((SELECT name FROM information_schema.tables WHERE table_type=’base table’ limit 0,1),1,1))>100 (로그인될때까지 시도)
결과 : 거짓이면 로그인실패, 참이될때까지 뒤의 100숫자를 변경해가며 비교. 
공격자는 이 프로세스를 자동화 스크립트로 만들어 단기간내에 테이블명 알아냄 
3-1.blind based / 로그인폼 통해 DB길이 추출 : ‘abc123’ OR (LENGTH(DATABASE())=1 (Sleep될때까지 시도) AND SLEEP(2)) –
결과 : LENGTH는 문자열길이를 반환하고, DATABASE는 DB의 이름을 반환. 
LENTH(DATABASE())=1이 참이면 SLEEP(2)가 동작,거짓이면 동작하지 않음
숫자 1부분을 조작하여 DB의 길이를 알아낼 수 있다
대응 : Prepared Statement구문 사용
      입력값에 대한 검증
      웹방화벽 사용
------------------------------------------------------------------------------------------
운영체제명령어삽입 : 적절한 검증절차가 수행되지 않은 사용자 입력값이 운영체제 명령어의 일부로 전달되어 의도하지 않은 시스템 명령어가 실행되도록 하는 공격기법
